<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_test</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>maxScale = 1;
S_SLOPE_SLOW = 0.9;
explodeSpd = 15;
lastHostX = 0;
lastHostY = 0;
friction = 0.1;
image_speed = 0;
h_counter = 0;
v_counter = 0;
on_ground = false;
Health = 10;
AttachHealth = 10;
RemoveHealth = 10;
MaxHealth = 20;
xSpd = 0;
ySpd = 0;
outside = true;
shape = "Square";
setIndex();
spd = 3;
checkBuffer = 5;
host = noone;
scale = .9;
defaultScale = scale;
clickScale = .3;
con = obj_controller_ripple;
if (x &gt; 300)
{
    isCore = true;
    controlScheme = global.controlScheme;
    global.controlScheme += 1;
    Health = 30;
    MaxHealth = 30;
    host = self;
    shape = "Circle";
    depth = -10;
}
else
    isCore = false;
attached = false;
grabbed = false;
positionX = 0;
positionY = 0;
wiggle = 1.2;
width = 32;
height = 32;
buffer = 4;
bodyColor = COLOR_AQUA_LIGHT;
outlineColor = COLOR_GRAY_DARK;
minWaveDistortion = height/3;
maxWaveDistortion = height* 1.1;
clampRadius = height * 1.2;
minWaveAmt = 20;
maxWaveAmt = 80;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//scr_sprite_dissolve(image_angle, 2, 10, 1, 1, 0, 0, 0, 0, room_speed);
//scr_sprite_explode(room_speed * 1.9, room_speed, 4, 2, width, width/3, 1, 0, 0, 0, 0, 0, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var h, v, collide, slope;

//Add to the counters, then get the h and v (pixels to move this step) from them.
h_counter += xSpd;
v_counter += ySpd;
h = round( h_counter );
v = round( v_counter );
h_counter -= h;
v_counter -= v;

//This loop will move the object based on hspd.  The object will never
//actually collide with a floor object, because this loop (and the next one for vspd) 
//will always position it right next to them without overlapping.  If the
//object collides with a wall, it will call one of two events:
// User Event 0 - if the collision is horizontal
// User Event 1 - if the collision is vertical
collide = false;
slope = false;
repeat (abs(h))
{
    if (place_meeting(x + sign(h), y, obj_solid))
    {
        if (!place_meeting(x + sign(h), y - 1, obj_solid))
        {
            //Running up slopes
            y -= 1;
            x += sign(h);
            slope = true;
        }
        else
        {
            //Hit a wall
            collide = true;
            break;
        }
    }
    else
    {
        if (on_ground)
        {
            if (!place_meeting(x + sign(h), y + 1, obj_solid) &amp;&amp; place_meeting(x + sign(h), y + 2, obj_solid))
                y += 1;
        }
        x += sign(h);  
    }

}

if (collide)
    event_perform(ev_other, ev_user0);
    
if (slope)
    xSpd = approach(xSpd, 0, S_SLOPE_SLOW);
    
collide = false;
repeat (abs(v))
{
    if (ySpd &lt;= 0)
    {
        if (place_meeting( x, y + sign(v), obj_solid))
        {
            collide = true;
            break;
        }
        else
            y += sign(v);
    }
    else if (checkBelow())
    {
        collide = true;
        break;
    }
    else
        y += sign(v);

}

if (collide)
    event_perform( ev_other, ev_user1 );
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scale = maxScale * (Health/MaxHealth);
//isCore = keyboard_check(vk_space);
if (!isCore)
{
    moved = false;
    if (attached &amp;&amp; host != noone)
    {
        moved = true;
        if (instance_exists(host))
        {
            xSpd = ((host.x + positionX) - x) * .3;
            ySpd = ((host.y + positionY) - y) * .3;
            lastHostX = host.x;
            lastHostY = host.y;
        }
        else
        {
            host = noone;
            attached = false;
            var dir = point_direction(x, y, lastHostX, lastHostY) - 180;
            xSpd = lengthdir_x(explodeSpd, dir);
            ySpd = lengthdir_y(explodeSpd, dir);
        }
    }
    if (grabbed)
    {
        moved = true;
        xSpd = (mouse_x - x) * .3;
        ySpd = (mouse_y - y) * .3;
        if(device_mouse_check_button_released(0, mb_left))
        {
            grabbed = false;
            checkHost();
        }
    }
    else if (device_mouse_check_button_pressed(0, mb_left) &amp;&amp; !global.mousePressing &amp;&amp; inShape() &amp;! grabbed)
    {
        global.mousePressing = true;
        if (host != noone)
        {
            hostLose(host, self); //Lose this piece
        }
        else
            grabbed = true;
    }
    if (!moved)
    {
        xSpd = lerp(xSpd, 0, friction);
        ySpd = lerp(ySpd, 0, friction);
    }
}
else
{
    moveCore();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (shape != "Triangle")
    draw_self();
draw_set_alpha(1 * Health/MaxHealth);
draw_set_colour(outlineColor);
drawOutline();
shader_set(shd_ripple);
shader_set_uniform_f(con.uni_time, con.var_time_var);
shader_set_uniform_f(con.uni_mouse_pos, mouse_x, mouse_y);
shader_set_uniform_f(con.uni_resolution, width, height);
shader_set_uniform_f(con.uni_wave_amount, random_range(minWaveAmt, maxWaveAmt));
shader_set_uniform_f(con.uni_wave_distortion, random_range(minWaveDistortion, maxWaveDistortion) );
shader_set_uniform_f(con.uni_wave_speed, random_range(con.var_wave_speed-wiggle, con.var_wave_speed + wiggle));
draw_set_colour(bodyColor);
drawBody();
shader_reset();
draw_set_alpha(0.7);
//draw_circle_colour(x,y, clampRadius, COLOR_AQUA_LIGHT, COLOR_RED_DARK, false);
draw_text(x, y - 45, Health);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
